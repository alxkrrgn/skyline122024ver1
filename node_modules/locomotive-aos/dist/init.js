"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var resetAttributes = ["data-aos", "data-aos-easing", "data-aos-duration", "data-aos-delay"];
function default_1(config) {
    if (config === void 0) { config = {}; }
    var _a = config.callback, callback = _a === void 0 ? function (e1, e2, e3, e4) { } : _a, _b = config.easing, easing = _b === void 0 ? "ease-in-out" : _b, _c = config.duration, duration = _c === void 0 ? 1000 : _c, _d = config.mirror, mirror = _d === void 0 ? false : _d, _e = config.delay, delay = _e === void 0 ? 0 : _e, _f = config.offset, offset = _f === void 0 ? "0px" : _f, _g = config.mobile, mobile = _g === void 0 ? false : _g, _h = config.minWindowWidth, minWindowWidth = _h === void 0 ? 0 : _h;
    var disableAOS = (mobile && /Android|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) || (window.innerWidth < minWindowWidth);
    if (disableAOS) {
        document.querySelectorAll('[data-aos]').forEach(function (aosElem) {
            resetAttributes.forEach(function (attr) {
                aosElem.removeAttribute(attr);
            });
        });
        //kill aos
        return { destroy: function () { } };
    }
    var observers = [];
    document.querySelectorAll('[data-aos]').forEach(function (aosElem) {
        var anchorString = aosElem.getAttribute("data-aos-anchor") || "";
        var anchor = anchorString ? (document.querySelector(anchorString) || aosElem) : aosElem;
        var observer = new IntersectionObserver(function (entries, observer) {
            entries.forEach(function (entry) {
                if (entry.isIntersecting) {
                    aosElem.classList.add("aos-animate");
                    callback(aosElem, "enter", observer, entry);
                }
                else if (mirror) {
                    aosElem.classList.remove("aos-animate");
                    callback(aosElem, "enter", observer, entry);
                }
            });
        }, {
            rootMargin: "-".concat(offset, " 0px ").concat(offset, " 0px")
        });
        observer.observe(anchor);
        observers.push(observer);
        aosElem.classList.add("aos-init");
        aosElem.getAttribute("data-aos-duration") ? null : (aosElem.setAttribute("data-aos-duration", duration.toString()));
        aosElem.getAttribute("data-aos-easing") ? null : (aosElem.setAttribute("data-aos-easing", easing.toString()));
        aosElem.getAttribute("data-aos-delay") ? null : (aosElem.setAttribute("data-aos-delay", delay.toString()));
    });
    return {
        destroy: function () {
            observers.forEach(function (observer) {
                observer.disconnect();
            });
        }
    };
}
exports.default = default_1;
